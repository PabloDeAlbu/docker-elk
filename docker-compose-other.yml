version: '3.2'

services:
  elasticsearch:
    container_name: ${PROJECT_NAME}_elasticsearch
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    container_name: ${PROJECT_NAME}_logstash
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
      - type: bind
        source: ./logstash/dumps
        target: /usr/share/logstash/dumps

    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    container_name: ${PROJECT_NAME}_kibana
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch
  
  postgres:
    container_name: ${PROJECT_NAME}_postgres
    build:
      context: postgres/
    environment:
      POSTGRES_DB: "dspace"
      POSTGRES_USER: "dspace"
      POSTGRES_PASSWORD: "dspace"
    volumes:
      - /var/lib/postgresql/data
      - ./others/postgres/dumps/dspace:/docker-entrypoint-initdb.d # Place init .sql file(s) here.
    networks:
      - elk

  pgadmin4:
      container_name: ${PROJECT_NAME}_pgadmin
      image: dpage/pgadmin4
      environment:
          PGADMIN_DEFAULT_EMAIL: "user@dspace.com"
          PGADMIN_DEFAULT_PASSWORD: "dspace"
      ports:
      - "82:80"
      networks:
        - elk

  apache2:
    container_name: ${PROJECT_NAME}_apache
    build:
      context: apache2/
    ports:
      - "81:80"

  filebeat:
    container_name: ${PROJECT_NAME}_filebeat
    build: 
      context: filebeat/
    volumes:
      - type: bind
        source: /home/pablo/docker/containers/*/*.log
        target: /var/log/docker
        read_only: true


  
        
networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
